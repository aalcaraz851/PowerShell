<#
Understanding Errors and Exception
1. Exception
2.Throw and Catch
3.The Call Stack
4.terminating and Non-terminating Errros
5.Swallowing an execption

Difference Between Errors and exceptions
Errors - Errors are returned as powershell Objects. Provide terminating and 
    non-termination errors

Exceptions - Exceptions are created when normal error handling 
    cannot handle the issue. Exception are typically non-termination

    Terminating and NON-termination
Terminating - The error genetated bt the script, function, or commands, stop or halts
  the execution

NON-terminating- Generated by internal commands. Normally auto matically hande so 
    the error doesn't terminate the execution of the pipeline

    Error Handling Approaches
    Throw
    write-error
    -errorAction
    Try/Catch
    Try/Finally
    Try/Catch/Fianlly

#Generte an error using "Throw"
Function New-error
{

Throw "This is an error"


}

#Use Write-Error with "-ErrorAction" to Generate Error
Write-Error -Message "This in an Error" -ErrorAction Stop


Generating and Handling Error
Funtion New-Error
{

$Number = 0;
for ($i = 1; $i -le 10; $i++)
{
    Wrtie-Host "the current number is: $i"
    Throw "This is an error";
    $number += $i

}

}

#Generate Error using "-ErrorAction"
New-Error -ErrorAction Stop

The erroraction Parameter Values
1 Continue-Logs error, then display error to console, and continues processing
2. Stop- Logs error, then display error to console, and then terminates
3. SlientlyContinue-Logs error does not display error, and continues processing
4. Ignore-does not log erro. does not display error, and continues processing


#>


# Demo Generate Error adn exceptions
# Handling errors and Exceptions

function New-Error {
$number = 0;
for($i = 1; $i -le 10; $i++) {
            Write-Host "The current number is: $i"
            Throw "This is an error"
            $number+= $i
                              }

                    }

New-Error


Write-Error -Message "This is an error" -ErrorAction Stop


function New-Error {
$number = 0;
for($i = 1; $i -le 10; $i++) {
            Write-Host "The current number is: $i"
            Write-Error -Message "Error" -ErrorAction SilentlyContinue
            $number+= $i
                              }

                    }

New-Error


function New-Error {
$number = 0;
for($i = 1; $i -le 10; $i++) {
            Write-Host "The current number is: $i"
            Write-Error -Message "Error" -ErrorAction Suspend
            $number+= $i
                              }

                    }

New-Error


function New-Error {
$number = 0;
for($i = 1; $i -le 10; $i++) {
            Write-Host "The current number is: $i"
            Write-Error -Message "Error" -ErrorAction Stop
            $number+= $i
                              }

                    }

New-Error

Throw "Error"

$error = Throw "Error"
$error
$error.


